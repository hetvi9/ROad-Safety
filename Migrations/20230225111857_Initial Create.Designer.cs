// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RodeSafetyTool.Models;

#nullable disable

namespace RodeSafetyTool.Migrations
{
    [DbContext(typeof(RoadAccidentDbContext))]
    [Migration("20230225111857_Initial Create")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RodeSafetyTool.Models.RoadAccident", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Airport_Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Amenity")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Astronomical_Twilight")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Bump")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Civil_Twilight")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("County")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Crossing")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Distance")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("End_Lat")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("End_Lng")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("End_Time")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Give_Way")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Humidity")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Junction")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Nautical_Twilight")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("No_Exit")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Precipitation")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Pressure")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Railway")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Roundabout")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Side")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Start_Lat")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Start_Lng")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Start_Time")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Station")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Stop")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Sunrise_Sunset")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Temperature")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Timezone")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Traffic_Calming")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Traffic_Signal")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Turning_Loop")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Visibility")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Weather_Condition")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Weather_Timestamp")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Wind_Chill")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Wind_Direction")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Wind_Speed")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Zipcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("ID");

                    b.ToTable("RoadAccidents");
                });
#pragma warning restore 612, 618
        }
    }
}
